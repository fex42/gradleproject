/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package gradleproject

import com.apurebase.kgraphql.KGraphQL
import io.ktor.serialization.kotlinx.json.*
import io.ktor.server.application.Application
import io.ktor.server.application.install
import io.ktor.server.application.call
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty
import io.ktor.server.plugins.contentnegotiation.ContentNegotiation
import io.ktor.server.request.receive
import io.ktor.server.response.*
import io.ktor.server.routing.*
import kotlinx.serialization.Serializable
import org.jetbrains.exposed.sql.Column
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.ResultRow
import org.jetbrains.exposed.sql.SchemaUtils
import org.jetbrains.exposed.sql.Table
import org.jetbrains.exposed.sql.insert
import org.jetbrains.exposed.sql.select
import org.jetbrains.exposed.sql.selectAll
import org.jetbrains.exposed.sql.transactions.transaction

@Serializable
data class User(val id: Int? = null, val name: String, val age: Int)

@Serializable
data class GraphQlRequest(val query: String)


object Users : Table() {
    val id: Column<Int> = integer("id").autoIncrement()
    val name: Column<String> = varchar("name", 255)
    val age: Column<Int> = integer("age")

    override val primaryKey = PrimaryKey(id, name="PK_USER_ID")

    fun toUser(row: ResultRow) = User(
        id = row[id],
        name = row[name],
        age = row[age]
    )
}

fun Application.myapp() {
    install(ContentNegotiation) {
        json()
    }

    Database.connect("jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;", "org.h2.Driver")
    transaction {
        SchemaUtils.create(Users)

        Users.insert {
            it[Users.name] = "John"
            it[Users.age] = 36
        }
        Users.insert {
            it[Users.name] = "Jack"
            it[Users.age] = 21
        }
        Users.insert {
            it[Users.name] = "Jill"
            it[Users.age] = 24
        }
     }

    val schema = KGraphQL.schema {
        query("heros") {
            resolver { ->
                transaction {
                    Users.selectAll().map { Users.toUser(it) }
                }
            }
        }

        query("hero") {
            resolver { id: Int ->
                transaction {
                    Users.select{ Users.id eq id }.map { Users.toUser(it) }
                }
            }
        }
    }


    install(Routing) {

        route("graphql") {
            get("/") {
                val graphRequest = call.receive<GraphQlRequest>()
                call.respond(schema.execute(graphRequest.query))
            }
        }
        route("/user") {

            get("/") {
                val users = transaction {
                    Users.selectAll().map {
                        Users.toUser(it)
                    }
                }
                call.respond(users)
            }

            get("/{id}") {
                val id = call.parameters["id"]!!.toInt()
                val users = transaction {
                    Users.select {
                        Users.id eq id
                    }.map {
                        Users.toUser(it)
                    }
                }
                call.respond(users)
            }

            post("/") {
                val user = call.receive<User>()
                transaction {
                    Users.insert {
                        it[name] = user.name
                        it[age] = user.age

                    }
                }
                call.respond(user)
            }
        }
    }
}


fun main() {
    embeddedServer(
        Netty,
        watchPaths = listOf("gradleproject"),
        module = Application::myapp,
        port = 8080
    ).start(wait = true)
}
